import re

def summarize_changes(input_file, summary_file):
    # Define a pattern to match commit information and file changes
    commit_info_pattern = re.compile(r'^(\w+)\s-\s(.+),\s(.+)\s:\s(.+)$')
    file_change_pattern = re.compile(r'^(?:\w+)\s+(.+\.(?:py|js|css|html|txt))', re.MULTILINE)

    # Read the input file with detailed changes
    with open(input_file, 'r') as file:
        content = file.read()

    # Process the content and write the summary
    with open(summary_file, 'w') as file:
        commit_blocks = content.split('\n\n')  # Assuming each commit block is separated by two newlines

        for block in commit_blocks:
            commit_info_match = commit_info_pattern.search(block)
            if commit_info_match:
                commit_hash, author, date, message = commit_info_match.groups()
                summary = f"Commit {commit_hash} by {author} on {date}:\n{message}\n"
                file.write(summary)

                file_changes = file_change_pattern.findall(block)
                for changed_file in file_changes:
                    # Attempt to categorize the change
                    if 'views' in changed_file:
                        file.write(f"- Views modified: {changed_file}\n")
                    elif 'urls' in changed_file:
                        file.write(f"- URLs modified: {changed_file}\n")
                    elif 'settings' in changed_file:
                        file.write(f"- Settings modified: {changed_file}\n")
                    # Add more elif blocks for other categories as needed

                file.write('\n')

    print(f"Summary has been written to {summary_file}")

# Set the path to the input file and the desired summary file
input_file = 'detailed_changes.txt'  # The file generated by get_git_changes
summary_file = 'summary_changes.txt'  # The new file for the summary

summarize_changes(input_file, summary_file)