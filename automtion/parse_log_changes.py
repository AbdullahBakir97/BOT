import re

def parse_log_file(log_file, summary_file):
    # Define a pattern to match commit entries in the log
    commit_entry_pattern = re.compile(
        r'^commit\s(?P<hash>[a-f0-9]+)\n'
        r'^Author:\s(?P<author>.+)\n'
        r'^Date:\s+(?P<date>.+)\n\n'
        r'(?P<message>.*?)\n\n', 
        re.MULTILINE | re.DOTALL
    )

    # Read the log file with the changes
    with open(log_file, 'r') as file:
        log_content = file.read()

    # Find all commit entries
    commits = commit_entry_pattern.finditer(log_content)

    # Open the summary file for writing
    with open(summary_file, 'w') as file:
        for commit in commits:
            commit_hash = commit.group('hash')
            author = commit.group('author')
            date = commit.group('date')
            message = commit.group('message').strip()

            # Write a summary for each commit
            summary = (
                f"Commit {commit_hash} by {author} on {date}:\n"
                f"{message}\n\n"
            )
            file.write(summary)
            # Optionally, add more details or statistics about changes

    print(f"Summary has been written to {summary_file}")

# Set the path to the log file and the desired summary file
log_file = 'detailed_changes.txt'  # The file generated by log_changes.py
summary_file = 'summary_of_changes.txt'  # The new file for the summary

parse_log_file(log_file, summary_file)